syntax = "proto3";

package medical_chain;
import "google/api/annotations.proto";
option go_package = "./api";


service Gateway {

    // Create User
    rpc PostUser(PostUserRequest) returns (PostUserResponse) {
        option (google.api.http) = {
            post: "/medicalpoint/users"
            body: "*"
        };
    }

     // Get Balance
    rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse) {
    option (google.api.http) = {
        get: "/medicalpoint/balance"
        };
    }

    // Mint point
    rpc PostMint(PostMintRequest) returns (PostMintResponse) {
        option (google.api.http) = {
            post: "/medicalpoint/mint"
            body: "*"
        };
    }

    // Burn point
    rpc PostBurn(PostBurnRequest) returns (PostBurnResponse) {
        option (google.api.http) = {
            post: "/medicalpoint/burn"
            body: "*"
        };
    }

    // Add admin
    rpc PostAdmin(PostAdminRequest) returns (PostAdminResponse) {
        option (google.api.http) = {
            post: "/medicalpoint/admin"
            body: "*"
        };
    }


    // Transfer point from user to user
    rpc PostTransfer(PostTransferRequest) returns (PostTransferResponse) {
        option (google.api.http) = {
            post: "/medicalpoint/transfer"
            body: "*"
        };
    }
    
    // Admin transfer point from system to user
    rpc PostAdminTransfer(PostAdminTransferRequest) returns (PostAdminTransferResponse) {
        option (google.api.http) = {
            post: "/medicalpoint/admin-transfer"
            body: "*"
        };
    }

    // Delete Admin from chain, not delete in database
    rpc DeleteAdmin(DeleteAdminRequest) returns (DeleteAdminResponse) {
        option (google.api.http) = {
            delete: "/medicalpoint/admin"
            body: "*"
        };
    }
     // Get system balances
     rpc GetSystemBalance(GetSystemBalanceRequest) returns (GetSystemBalanceResponse) {
        option (google.api.http) = {
            get: "/medicalpoint/system-balance"
        };
    }
    // Get total supply in system
    rpc GetTotalSupply(GetTotalSupplyRequest) returns (GetTotalSupplyResponse) {
        option (google.api.http) = {
            get: "/medicalpoint/total-supply"
        };
    }
    // Update super-admin to another user 
    rpc PutSuperAdmin(PutSuperAdminRequest) returns (PutSuperAdminResponse) {
        option (google.api.http) = {
            put: "/medicalpoint/super-admin"
            body: "*"
        };
    }
    
}
message PutSuperAdminRequest {
    // id of current superadmin in main server
    string id = 1;
    // id of new admin to update, must existed in system
    string adminId = 2;
}

message PutSuperAdminResponse {
    string id = 1;
    string adminId = 2;
    // txh of transaction transfer-super-admin
    string txh = 3;
}

message GetTotalSupplyRequest {
}

message GetTotalSupplyResponse {
    // list of balances
    repeated Point balances = 1;
    message Point {
        // denom name of token
        string denom = 1;
        // amount of token
        string amount = 2;
    }
}

message GetSystemBalanceRequest {
}

message GetSystemBalanceResponse {
    // list of balances
    repeated Point balances = 1;
    message Point {
        // denom name of token
        string denom = 1;
        // amount of token
        string amount = 2;
    }
}

message DeleteAdminRequest {
    //id of superadmin in main server
    string id = 1;
    //adminId of admin to delete
    string adminId = 2;
}

message DeleteAdminResponse {
    string id = 1;
    string adminId = 2;
    // txh of transaction delete-admin
    string txh = 3;
}

message PostAdminRequest {
    //id of superadmin in main server
    string id = 1;
    //adminId of admin to add
    string adminId = 2;
}

message PostAdminResponse {
    string id = 1;
    string adminId = 2;
    // txh of transaction create-admin
    string txh = 3;
}


message PostUserRequest {
    //id in main server
    string id = 1;
}

message PostUserResponse {
    string id = 1;
}


message GetBalanceRequest {
    //id of user in main server that want to check balance
    string id = 1;
}


message GetBalanceResponse {
    // list of balances
    repeated Point balances = 1;
    message Point {
        // denom name of token
        string denom = 1;
        // amount of token
        string amount = 2;
    }
}


message PostMintRequest {
    // amount of token to mint
    string amount = 1;
    // id of superadmin in main server 
    string id = 2;
}


message PostMintResponse {
    string id = 1;
    // amount of token has been minted
    string amount = 2;
    // txh of transaction mint
    string txh = 3;
}

message PostBurnRequest {
    // id of superadmin in main server 
    string id = 1;
    // amount of token to burn
    string amount = 2;
}

message PostBurnResponse {
    string id = 1;
    // amount of token has been burned
    string amount = 2;
    // txh of transaction burn
    string txh = 3;
}

message PostTransferRequest {
    // id of sender user in main server 
    string id = 1;
    // id of reciever user in main server 
    string to = 2;
    // amount of token to transfer
    string amount = 3;
    // denom name of token to transfer (eg: point)
    string denom = 4;
}

message PostTransferResponse {
    string id = 1;
    string to = 2;
    // amount of token has been transfered
    string amount = 3;
    string denom = 4;
    // txh of transaction transfer
    string txh = 5;
}

message PostAdminTransferRequest {
    // id of admin in main server 
    string id = 1;
    // id of reciever user in main server 
    string to = 2;
    // amount of token to transfer
    string amount = 3;
    // denom name of token to transfer (eg: point)
    string denom = 4;
}

message PostAdminTransferResponse {
    string id = 1;
    string to = 2;
    // amount of token has been transfered
    string amount = 3;
    string denom = 4;
    // txh of transaction admin-transfer
    string txh = 5;
}