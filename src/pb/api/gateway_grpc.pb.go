// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	// Get admin
	GetAdmin(ctx context.Context, in *GetAdminRequest, opts ...grpc.CallOption) (*GetAdminResponse, error)
	// Create User
	PostUser(ctx context.Context, in *PostUserRequest, opts ...grpc.CallOption) (*PostUserResponse, error)
	// Get Balance
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	// Init Super admin
	PostSuperAdmin(ctx context.Context, in *PostSuperAdminRequest, opts ...grpc.CallOption) (*PostSuperAdminResponse, error)
	// Mint point
	PostMint(ctx context.Context, in *PostMintRequest, opts ...grpc.CallOption) (*PostMintResponse, error)
	// Burn point
	PostBurn(ctx context.Context, in *PostBurnRequest, opts ...grpc.CallOption) (*PostBurnResponse, error)
	// Transfer point from user to user
	PostTransfer(ctx context.Context, in *PostTransferRequest, opts ...grpc.CallOption) (*PostTransferResponse, error)
	// Admin transfer point from system to user
	PostAdminTransfer(ctx context.Context, in *PostAdminTransferRequest, opts ...grpc.CallOption) (*PostAdminTransferResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GetAdmin(ctx context.Context, in *GetAdminRequest, opts ...grpc.CallOption) (*GetAdminResponse, error) {
	out := new(GetAdminResponse)
	err := c.cc.Invoke(ctx, "/medical_chain.Gateway/GetAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PostUser(ctx context.Context, in *PostUserRequest, opts ...grpc.CallOption) (*PostUserResponse, error) {
	out := new(PostUserResponse)
	err := c.cc.Invoke(ctx, "/medical_chain.Gateway/PostUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/medical_chain.Gateway/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PostSuperAdmin(ctx context.Context, in *PostSuperAdminRequest, opts ...grpc.CallOption) (*PostSuperAdminResponse, error) {
	out := new(PostSuperAdminResponse)
	err := c.cc.Invoke(ctx, "/medical_chain.Gateway/PostSuperAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PostMint(ctx context.Context, in *PostMintRequest, opts ...grpc.CallOption) (*PostMintResponse, error) {
	out := new(PostMintResponse)
	err := c.cc.Invoke(ctx, "/medical_chain.Gateway/PostMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PostBurn(ctx context.Context, in *PostBurnRequest, opts ...grpc.CallOption) (*PostBurnResponse, error) {
	out := new(PostBurnResponse)
	err := c.cc.Invoke(ctx, "/medical_chain.Gateway/PostBurn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PostTransfer(ctx context.Context, in *PostTransferRequest, opts ...grpc.CallOption) (*PostTransferResponse, error) {
	out := new(PostTransferResponse)
	err := c.cc.Invoke(ctx, "/medical_chain.Gateway/PostTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PostAdminTransfer(ctx context.Context, in *PostAdminTransferRequest, opts ...grpc.CallOption) (*PostAdminTransferResponse, error) {
	out := new(PostAdminTransferResponse)
	err := c.cc.Invoke(ctx, "/medical_chain.Gateway/PostAdminTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	// Get admin
	GetAdmin(context.Context, *GetAdminRequest) (*GetAdminResponse, error)
	// Create User
	PostUser(context.Context, *PostUserRequest) (*PostUserResponse, error)
	// Get Balance
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	// Init Super admin
	PostSuperAdmin(context.Context, *PostSuperAdminRequest) (*PostSuperAdminResponse, error)
	// Mint point
	PostMint(context.Context, *PostMintRequest) (*PostMintResponse, error)
	// Burn point
	PostBurn(context.Context, *PostBurnRequest) (*PostBurnResponse, error)
	// Transfer point from user to user
	PostTransfer(context.Context, *PostTransferRequest) (*PostTransferResponse, error)
	// Admin transfer point from system to user
	PostAdminTransfer(context.Context, *PostAdminTransferRequest) (*PostAdminTransferResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) GetAdmin(context.Context, *GetAdminRequest) (*GetAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdmin not implemented")
}
func (UnimplementedGatewayServer) PostUser(context.Context, *PostUserRequest) (*PostUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUser not implemented")
}
func (UnimplementedGatewayServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedGatewayServer) PostSuperAdmin(context.Context, *PostSuperAdminRequest) (*PostSuperAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSuperAdmin not implemented")
}
func (UnimplementedGatewayServer) PostMint(context.Context, *PostMintRequest) (*PostMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMint not implemented")
}
func (UnimplementedGatewayServer) PostBurn(context.Context, *PostBurnRequest) (*PostBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostBurn not implemented")
}
func (UnimplementedGatewayServer) PostTransfer(context.Context, *PostTransferRequest) (*PostTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTransfer not implemented")
}
func (UnimplementedGatewayServer) PostAdminTransfer(context.Context, *PostAdminTransferRequest) (*PostAdminTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAdminTransfer not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_GetAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_chain.Gateway/GetAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAdmin(ctx, req.(*GetAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PostUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PostUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_chain.Gateway/PostUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PostUser(ctx, req.(*PostUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_chain.Gateway/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PostSuperAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSuperAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PostSuperAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_chain.Gateway/PostSuperAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PostSuperAdmin(ctx, req.(*PostSuperAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PostMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PostMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_chain.Gateway/PostMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PostMint(ctx, req.(*PostMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PostBurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostBurnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PostBurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_chain.Gateway/PostBurn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PostBurn(ctx, req.(*PostBurnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PostTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PostTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_chain.Gateway/PostTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PostTransfer(ctx, req.(*PostTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PostAdminTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAdminTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PostAdminTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/medical_chain.Gateway/PostAdminTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PostAdminTransfer(ctx, req.(*PostAdminTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "medical_chain.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAdmin",
			Handler:    _Gateway_GetAdmin_Handler,
		},
		{
			MethodName: "PostUser",
			Handler:    _Gateway_PostUser_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Gateway_GetBalance_Handler,
		},
		{
			MethodName: "PostSuperAdmin",
			Handler:    _Gateway_PostSuperAdmin_Handler,
		},
		{
			MethodName: "PostMint",
			Handler:    _Gateway_PostMint_Handler,
		},
		{
			MethodName: "PostBurn",
			Handler:    _Gateway_PostBurn_Handler,
		},
		{
			MethodName: "PostTransfer",
			Handler:    _Gateway_PostTransfer_Handler,
		},
		{
			MethodName: "PostAdminTransfer",
			Handler:    _Gateway_PostAdminTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}
