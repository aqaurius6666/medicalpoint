// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: medipoint/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetAdminRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetAdminRequest) Reset()         { *m = QueryGetAdminRequest{} }
func (m *QueryGetAdminRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAdminRequest) ProtoMessage()    {}
func (*QueryGetAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f4027bf5da4eb4, []int{0}
}
func (m *QueryGetAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAdminRequest.Merge(m, src)
}
func (m *QueryGetAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAdminRequest proto.InternalMessageInfo

func (m *QueryGetAdminRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetAdminResponse struct {
	Admin Admin `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin"`
}

func (m *QueryGetAdminResponse) Reset()         { *m = QueryGetAdminResponse{} }
func (m *QueryGetAdminResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAdminResponse) ProtoMessage()    {}
func (*QueryGetAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f4027bf5da4eb4, []int{1}
}
func (m *QueryGetAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAdminResponse.Merge(m, src)
}
func (m *QueryGetAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAdminResponse proto.InternalMessageInfo

func (m *QueryGetAdminResponse) GetAdmin() Admin {
	if m != nil {
		return m.Admin
	}
	return Admin{}
}

type QueryAllAdminRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAdminRequest) Reset()         { *m = QueryAllAdminRequest{} }
func (m *QueryAllAdminRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAdminRequest) ProtoMessage()    {}
func (*QueryAllAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f4027bf5da4eb4, []int{2}
}
func (m *QueryAllAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAdminRequest.Merge(m, src)
}
func (m *QueryAllAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAdminRequest proto.InternalMessageInfo

func (m *QueryAllAdminRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAdminResponse struct {
	Admin      []Admin             `protobuf:"bytes,1,rep,name=admin,proto3" json:"admin"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAdminResponse) Reset()         { *m = QueryAllAdminResponse{} }
func (m *QueryAllAdminResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAdminResponse) ProtoMessage()    {}
func (*QueryAllAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f4027bf5da4eb4, []int{3}
}
func (m *QueryAllAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAdminResponse.Merge(m, src)
}
func (m *QueryAllAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAdminResponse proto.InternalMessageInfo

func (m *QueryAllAdminResponse) GetAdmin() []Admin {
	if m != nil {
		return m.Admin
	}
	return nil
}

func (m *QueryAllAdminResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSuperAdminRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetSuperAdminRequest) Reset()         { *m = QueryGetSuperAdminRequest{} }
func (m *QueryGetSuperAdminRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSuperAdminRequest) ProtoMessage()    {}
func (*QueryGetSuperAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f4027bf5da4eb4, []int{4}
}
func (m *QueryGetSuperAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSuperAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSuperAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSuperAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSuperAdminRequest.Merge(m, src)
}
func (m *QueryGetSuperAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSuperAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSuperAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSuperAdminRequest proto.InternalMessageInfo

func (m *QueryGetSuperAdminRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetSuperAdminResponse struct {
	SuperAdmin SuperAdmin `protobuf:"bytes,1,opt,name=SuperAdmin,proto3" json:"SuperAdmin"`
}

func (m *QueryGetSuperAdminResponse) Reset()         { *m = QueryGetSuperAdminResponse{} }
func (m *QueryGetSuperAdminResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSuperAdminResponse) ProtoMessage()    {}
func (*QueryGetSuperAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f4027bf5da4eb4, []int{5}
}
func (m *QueryGetSuperAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSuperAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSuperAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSuperAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSuperAdminResponse.Merge(m, src)
}
func (m *QueryGetSuperAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSuperAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSuperAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSuperAdminResponse proto.InternalMessageInfo

func (m *QueryGetSuperAdminResponse) GetSuperAdmin() SuperAdmin {
	if m != nil {
		return m.SuperAdmin
	}
	return SuperAdmin{}
}

type QueryAllSuperAdminRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSuperAdminRequest) Reset()         { *m = QueryAllSuperAdminRequest{} }
func (m *QueryAllSuperAdminRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSuperAdminRequest) ProtoMessage()    {}
func (*QueryAllSuperAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f4027bf5da4eb4, []int{6}
}
func (m *QueryAllSuperAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSuperAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSuperAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSuperAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSuperAdminRequest.Merge(m, src)
}
func (m *QueryAllSuperAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSuperAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSuperAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSuperAdminRequest proto.InternalMessageInfo

func (m *QueryAllSuperAdminRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSuperAdminResponse struct {
	SuperAdmin []SuperAdmin        `protobuf:"bytes,1,rep,name=SuperAdmin,proto3" json:"SuperAdmin"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSuperAdminResponse) Reset()         { *m = QueryAllSuperAdminResponse{} }
func (m *QueryAllSuperAdminResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSuperAdminResponse) ProtoMessage()    {}
func (*QueryAllSuperAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f4027bf5da4eb4, []int{7}
}
func (m *QueryAllSuperAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSuperAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSuperAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSuperAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSuperAdminResponse.Merge(m, src)
}
func (m *QueryAllSuperAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSuperAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSuperAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSuperAdminResponse proto.InternalMessageInfo

func (m *QueryAllSuperAdminResponse) GetSuperAdmin() []SuperAdmin {
	if m != nil {
		return m.SuperAdmin
	}
	return nil
}

func (m *QueryAllSuperAdminResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetAdminRequest)(nil), "sotanext.medipoint.medipoint.QueryGetAdminRequest")
	proto.RegisterType((*QueryGetAdminResponse)(nil), "sotanext.medipoint.medipoint.QueryGetAdminResponse")
	proto.RegisterType((*QueryAllAdminRequest)(nil), "sotanext.medipoint.medipoint.QueryAllAdminRequest")
	proto.RegisterType((*QueryAllAdminResponse)(nil), "sotanext.medipoint.medipoint.QueryAllAdminResponse")
	proto.RegisterType((*QueryGetSuperAdminRequest)(nil), "sotanext.medipoint.medipoint.QueryGetSuperAdminRequest")
	proto.RegisterType((*QueryGetSuperAdminResponse)(nil), "sotanext.medipoint.medipoint.QueryGetSuperAdminResponse")
	proto.RegisterType((*QueryAllSuperAdminRequest)(nil), "sotanext.medipoint.medipoint.QueryAllSuperAdminRequest")
	proto.RegisterType((*QueryAllSuperAdminResponse)(nil), "sotanext.medipoint.medipoint.QueryAllSuperAdminResponse")
}

func init() { proto.RegisterFile("medipoint/query.proto", fileDescriptor_f7f4027bf5da4eb4) }

var fileDescriptor_f7f4027bf5da4eb4 = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0x6e, 0x41, 0x60, 0x04, 0x07, 0xab, 0x93, 0x20, 0x4c, 0x01, 0x65, 0x02, 0xaa,
	0x95, 0xc5, 0xac, 0x15, 0x1a, 0x37, 0xd4, 0x1d, 0x98, 0xb8, 0x20, 0x08, 0x17, 0xc4, 0x01, 0xe4,
	0x36, 0x56, 0xb0, 0x94, 0xc6, 0x59, 0xed, 0xa2, 0x4e, 0xd3, 0x2e, 0x7c, 0x02, 0x24, 0xbe, 0x00,
	0x1c, 0xf8, 0x06, 0xc0, 0x07, 0xe0, 0xb4, 0xe3, 0x24, 0x2e, 0x9c, 0x10, 0x6a, 0xf9, 0x20, 0x28,
	0xb6, 0xbb, 0xa4, 0x69, 0x29, 0xd9, 0xd8, 0xcd, 0x75, 0xde, 0xff, 0xbd, 0xdf, 0xfb, 0xbf, 0xbe,
	0x04, 0xae, 0xf4, 0x68, 0xc0, 0x12, 0xce, 0x62, 0x89, 0x77, 0x07, 0xb4, 0xbf, 0xe7, 0x25, 0x7d,
	0x2e, 0x39, 0x5a, 0x15, 0x5c, 0x92, 0x98, 0x0e, 0xa5, 0x77, 0xfc, 0x3c, 0x3b, 0xd9, 0xab, 0x21,
	0xe7, 0x61, 0x44, 0x31, 0x49, 0x18, 0x26, 0x71, 0xcc, 0x25, 0x91, 0x8c, 0xc7, 0x42, 0x6b, 0xed,
	0xf5, 0x2e, 0x17, 0x3d, 0x2e, 0x70, 0x87, 0x08, 0xaa, 0x93, 0xe2, 0x37, 0x9b, 0x1d, 0x2a, 0xc9,
	0x26, 0x4e, 0x48, 0xc8, 0x62, 0x15, 0x6c, 0x62, 0x73, 0xe5, 0x49, 0xd0, 0x63, 0x93, 0xeb, 0x6b,
	0xd9, 0xb5, 0x18, 0x24, 0xb4, 0xff, 0x2a, 0xff, 0xb0, 0x16, 0xf2, 0x90, 0xab, 0x23, 0x4e, 0x4f,
	0xfa, 0xd6, 0xbd, 0x03, 0x6b, 0x4f, 0xd3, 0x5a, 0x3b, 0x54, 0xb6, 0xd3, 0x60, 0x9f, 0xee, 0x0e,
	0xa8, 0x90, 0xa8, 0x06, 0x2d, 0x16, 0x07, 0x74, 0x78, 0x05, 0xdc, 0x00, 0xf5, 0x0b, 0xbe, 0xfe,
	0xe1, 0x3e, 0x87, 0x2b, 0x85, 0x68, 0x91, 0xf0, 0x58, 0x50, 0xf4, 0x00, 0x5a, 0xaa, 0x96, 0x0a,
	0xbf, 0xd8, 0x5c, 0xf3, 0x16, 0x19, 0xe1, 0x29, 0xed, 0xf6, 0xf2, 0xe1, 0xcf, 0xeb, 0x15, 0x5f,
	0xeb, 0xdc, 0x97, 0x86, 0xa3, 0x1d, 0x45, 0x53, 0x1c, 0x0f, 0x21, 0xcc, 0xba, 0x37, 0xd9, 0x6f,
	0x79, 0xda, 0x2a, 0x2f, 0xb5, 0xca, 0xd3, 0xfe, 0x1b, 0xab, 0xbc, 0x27, 0x24, 0xa4, 0x46, 0xeb,
	0xe7, 0x94, 0xee, 0x47, 0x60, 0xd0, 0xb3, 0x02, 0xb3, 0xe8, 0x4b, 0xa7, 0x41, 0x47, 0x3b, 0x53,
	0x88, 0x55, 0x85, 0x78, 0xfb, 0x9f, 0x88, 0xba, 0xfa, 0x14, 0x63, 0x03, 0x5e, 0x9d, 0xb8, 0xfb,
	0x2c, 0x1d, 0xdf, 0x94, 0x11, 0x97, 0x61, 0x95, 0x05, 0xca, 0x80, 0x65, 0xbf, 0xca, 0x02, 0x37,
	0x82, 0xf6, 0xbc, 0x60, 0xd3, 0xd4, 0x63, 0x08, 0xb3, 0x5b, 0x63, 0x5b, 0x7d, 0x71, 0x67, 0x59,
	0xbc, 0x69, 0x2f, 0x97, 0xc1, 0xed, 0x1a, 0xb4, 0x76, 0x14, 0xcd, 0xa2, 0x9d, 0xd5, 0x8c, 0xbe,
	0x00, 0xd3, 0x53, 0xa1, 0xca, 0x5f, 0x7a, 0x5a, 0xfa, 0xbf, 0x9e, 0xce, 0x6c, 0x6e, 0xcd, 0x6f,
	0x16, 0xb4, 0x14, 0x37, 0xfa, 0x04, 0xa0, 0xa5, 0x93, 0x37, 0x17, 0x83, 0xcd, 0xdb, 0x39, 0xbb,
	0x75, 0x22, 0x8d, 0x06, 0x71, 0x5b, 0x6f, 0xbf, 0xff, 0x7e, 0x5f, 0xdd, 0x40, 0x0d, 0x3c, 0x11,
	0xe3, 0xec, 0x2d, 0x50, 0x78, 0x4d, 0xe0, 0x7d, 0xb5, 0xc6, 0x07, 0xe8, 0x03, 0x80, 0xe7, 0x55,
	0x9a, 0x76, 0x14, 0x95, 0x42, 0x2d, 0xac, 0x65, 0x29, 0xd4, 0xe2, 0xa6, 0xb9, 0x0d, 0x85, 0x7a,
	0x13, 0xad, 0x95, 0x40, 0x45, 0x5f, 0x41, 0x7e, 0xdc, 0x68, 0xab, 0x9c, 0x37, 0x33, 0x7f, 0x4e,
	0xfb, 0xfe, 0xc9, 0x85, 0x06, 0xf7, 0x9e, 0xc2, 0xc5, 0x68, 0x63, 0x31, 0xae, 0x38, 0x56, 0xe2,
	0x7d, 0x16, 0x1c, 0xa0, 0xcf, 0x00, 0x5e, 0xca, 0xb2, 0xa5, 0x06, 0x6f, 0x95, 0x33, 0xeb, 0x74,
	0xec, 0x73, 0x77, 0xc5, 0xbd, 0xab, 0xd8, 0xd7, 0x51, 0xbd, 0x2c, 0xfb, 0xf6, 0xa3, 0xc3, 0x91,
	0x03, 0x8e, 0x46, 0x0e, 0xf8, 0x35, 0x72, 0xc0, 0xbb, 0xb1, 0x53, 0x39, 0x1a, 0x3b, 0x95, 0x1f,
	0x63, 0xa7, 0xf2, 0x02, 0x87, 0x4c, 0xbe, 0x1e, 0x74, 0xbc, 0x2e, 0xef, 0xcd, 0xcb, 0x36, 0xcc,
	0x9d, 0xe5, 0x5e, 0x42, 0x45, 0xe7, 0x9c, 0xfa, 0xb4, 0xb4, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x1d, 0x9d, 0x12, 0xfd, 0x25, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a admin by index.
	Admin(ctx context.Context, in *QueryGetAdminRequest, opts ...grpc.CallOption) (*QueryGetAdminResponse, error)
	// Queries a list of admin items.
	AdminAll(ctx context.Context, in *QueryAllAdminRequest, opts ...grpc.CallOption) (*QueryAllAdminResponse, error)
	// Queries a superAdmin by id.
	SuperAdmin(ctx context.Context, in *QueryGetSuperAdminRequest, opts ...grpc.CallOption) (*QueryGetSuperAdminResponse, error)
	// Queries a list of superAdmin items.
	SuperAdminAll(ctx context.Context, in *QueryAllSuperAdminRequest, opts ...grpc.CallOption) (*QueryAllSuperAdminResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Admin(ctx context.Context, in *QueryGetAdminRequest, opts ...grpc.CallOption) (*QueryGetAdminResponse, error) {
	out := new(QueryGetAdminResponse)
	err := c.cc.Invoke(ctx, "/sotanext.medipoint.medipoint.Query/Admin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AdminAll(ctx context.Context, in *QueryAllAdminRequest, opts ...grpc.CallOption) (*QueryAllAdminResponse, error) {
	out := new(QueryAllAdminResponse)
	err := c.cc.Invoke(ctx, "/sotanext.medipoint.medipoint.Query/AdminAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SuperAdmin(ctx context.Context, in *QueryGetSuperAdminRequest, opts ...grpc.CallOption) (*QueryGetSuperAdminResponse, error) {
	out := new(QueryGetSuperAdminResponse)
	err := c.cc.Invoke(ctx, "/sotanext.medipoint.medipoint.Query/SuperAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SuperAdminAll(ctx context.Context, in *QueryAllSuperAdminRequest, opts ...grpc.CallOption) (*QueryAllSuperAdminResponse, error) {
	out := new(QueryAllSuperAdminResponse)
	err := c.cc.Invoke(ctx, "/sotanext.medipoint.medipoint.Query/SuperAdminAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a admin by index.
	Admin(context.Context, *QueryGetAdminRequest) (*QueryGetAdminResponse, error)
	// Queries a list of admin items.
	AdminAll(context.Context, *QueryAllAdminRequest) (*QueryAllAdminResponse, error)
	// Queries a superAdmin by id.
	SuperAdmin(context.Context, *QueryGetSuperAdminRequest) (*QueryGetSuperAdminResponse, error)
	// Queries a list of superAdmin items.
	SuperAdminAll(context.Context, *QueryAllSuperAdminRequest) (*QueryAllSuperAdminResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Admin(ctx context.Context, req *QueryGetAdminRequest) (*QueryGetAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Admin not implemented")
}
func (*UnimplementedQueryServer) AdminAll(ctx context.Context, req *QueryAllAdminRequest) (*QueryAllAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAll not implemented")
}
func (*UnimplementedQueryServer) SuperAdmin(ctx context.Context, req *QueryGetSuperAdminRequest) (*QueryGetSuperAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperAdmin not implemented")
}
func (*UnimplementedQueryServer) SuperAdminAll(ctx context.Context, req *QueryAllSuperAdminRequest) (*QueryAllSuperAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperAdminAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Admin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Admin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sotanext.medipoint.medipoint.Query/Admin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Admin(ctx, req.(*QueryGetAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AdminAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AdminAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sotanext.medipoint.medipoint.Query/AdminAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AdminAll(ctx, req.(*QueryAllAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SuperAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSuperAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SuperAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sotanext.medipoint.medipoint.Query/SuperAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SuperAdmin(ctx, req.(*QueryGetSuperAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SuperAdminAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSuperAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SuperAdminAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sotanext.medipoint.medipoint.Query/SuperAdminAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SuperAdminAll(ctx, req.(*QueryAllSuperAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sotanext.medipoint.medipoint.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Admin",
			Handler:    _Query_Admin_Handler,
		},
		{
			MethodName: "AdminAll",
			Handler:    _Query_AdminAll_Handler,
		},
		{
			MethodName: "SuperAdmin",
			Handler:    _Query_SuperAdmin_Handler,
		},
		{
			MethodName: "SuperAdminAll",
			Handler:    _Query_SuperAdminAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medipoint/query.proto",
}

func (m *QueryGetAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Admin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		for iNdEx := len(m.Admin) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Admin[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSuperAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSuperAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSuperAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSuperAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSuperAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSuperAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SuperAdmin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSuperAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSuperAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSuperAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSuperAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSuperAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSuperAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SuperAdmin) > 0 {
		for iNdEx := len(m.SuperAdmin) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SuperAdmin[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Admin.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Admin) > 0 {
		for _, e := range m.Admin {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSuperAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetSuperAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SuperAdmin.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSuperAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSuperAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SuperAdmin) > 0 {
		for _, e := range m.SuperAdmin {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Admin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = append(m.Admin, Admin{})
			if err := m.Admin[len(m.Admin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSuperAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSuperAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSuperAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSuperAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSuperAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSuperAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperAdmin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SuperAdmin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSuperAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSuperAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSuperAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSuperAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSuperAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSuperAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperAdmin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuperAdmin = append(m.SuperAdmin, SuperAdmin{})
			if err := m.SuperAdmin[len(m.SuperAdmin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
