// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"context"
	"github.com/cosmos/cosmos-sdk/crypto/keyring"
	"github.com/medicalpoint/gateway/src/api"
	"github.com/medicalpoint/gateway/src/db"
	"github.com/medicalpoint/gateway/src/services/cosmos"
	"github.com/sonntuet1997/medical-chain-utils/common"
	"github.com/urfave/cli/v2"
)

// Injectors from gateway.wire.go:

func InitGateWayServer(ctx context.Context, opts AppOptions) (*api.GateWayServer, error) {
	cliContext := opts.cliContext
	logrusLogger := common.InitLogger(cliContext)
	dbDsn := opts.dbDsn
	gateWayServiceRepo, err := db.InitGateWayServiceRepo(ctx, logrusLogger, dbDsn)
	if err != nil {
		return nil, err
	}
	chainID := opts.ChainId
	unsafeKeyring := opts.KeyRing
	cosmosEndpoint := opts.CosmosEp
	mnemonic := opts.Mne
	cosmosServiceClient, err := cosmos.InitCosmosServiceClient(ctx, logrusLogger, chainID, unsafeKeyring, cosmosEndpoint, mnemonic)
	if err != nil {
		return nil, err
	}
	string2 := opts.Key
	apiServiceOptions := api.ApiServiceOptions{
		Logger:         logrusLogger,
		GateWayCDBRepo: gateWayServiceRepo,
		Chain:          cosmosServiceClient,
		Key:            string2,
	}
	gateWayServer, err := api.InitApiService(ctx, apiServiceOptions)
	if err != nil {
		return nil, err
	}
	return gateWayServer, nil
}

// gateway.wire.go:

type AppOptions struct {
	dbDsn      db.DBDsn
	cliContext *cli.Context
	ChainId    cosmos.ChainID
	KeyRing    keyring.UnsafeKeyring
	CosmosEp   cosmos.CosmosEndpoint
	Mne        cosmos.Mnemonic
	Key        string
}
